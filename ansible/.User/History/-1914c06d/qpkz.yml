---
- hosts: web_servers
  become: true
  vars_files:
    - ./vars/variables.yml

  pre_tasks:
    - name: Install Nginx in Ubuntu
      ansible.builtin.apt:
        name:
          - nginx
        state: present

    - name: Preparation before install
      ansible.builtin.include_role:
        name: preparation_for_script

  tasks:

# Install MongoDb, configure mongodb
#    - name: GPG keys for mongo
#      ansible.builtin.apt_key:
#        url: https://www.mongodb.org/static/pgp/server-8.0.asc
#        state: present
#
#    - name: repository for mongo
#      ansible.builtin.apt_repository:
#        repo: deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu noble/mongodb-org/8.0 multiverse
#        state: present
#        filename: mongodb-org-8.0
#
#    - name: install mongodb
#      ansible.builtin.apt:
#        name: mongodb-org
#        state: present
#
#    - name: start mongodb
#      service:
#        name: mongod
#        enabled: yes
#        state: started
#    
#    - name: install pip
#      apt:
#        name: python3-pip
#        state: present
#
#    - name: install pymongo
#      shell: pip3 install pymongo --break-system-packages
#
#    - name: create user mongodb
#      community.mongodb.mongodb_user:
#        login_host: localhost
#        login_port: "{{ mongo_ports }}"
#        name: "{{ username }}"
#        password: "{{ password }}"
#        roles: ["root"]
#        database: admin
#        state: present
#    
#    - name: configure mongodb
#      copy:
#        dest: /etc/mongod.conf
#        content: |
#          storage:
#            dbPath: /var/lib/mongodb
#          
#          systemLog:
#            destination: file
#            logAppend: true
#            path: /var/log/mongodb/mongod.log
#          
#          net:
#            port: 27017
#            bindIp: 127.0.0.1
#
#          processManagement:
#            timeZoneInfo: /usr/share/zoneinfo
#
#          security:
#            authorization: enabled
#        owner: root
#        group: root
#        mode: '0644'
#    
#    - name: restart mongodb
#      service:
#        name: mongod
#        state: restarted


# Install redis, configure redis
    - name: ensure packages installed
      apt: pkg={{ item }} state=latest
      with_items:
        - make
        - build-essential
        - tcl

    - name: download latest stable redis
      get_url: url=http://download.redis.io/redis-stable.tar.gz dest=/tmp/redis-stable.tar.gz

    - name: untar redis
      command: tar zxf /tmp/redis-stable.tar.gz -C /tmp

    - name: build redis
      command: make -C /tmp/redis-stable

    - name: create redis group
      group: name=redis state=present system=yes

    - name: create redis user
      user: name=redis group=redis createhome=no shell=/bin/false system=yes state=present

    - name: make sure that /etc/redis exists
      file: path=/etc/redis state=directory mode=0755

    - name: make sure that /var/db/redis exists
      file: path=/var/db/redis state=directory mode=0755 group=redis owner=redis

    - name: make sure redis.log file exists
      copy: src=templates/redis.log dest=/var/log/redis.log owner=redis group=redis mode=0644
    
    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /etc/init
        state: directory

    - name: copy systemd file
      copy: src=templates/redis.service dest=/etc/init.d/redis.conf

    - name: copy redis.conf file
      copy: src=templates/redis.conf dest=/etc/redis/redis.conf group=redis owner=redis

    - name: copy custom template
      template: src=templates/redis.local.conf.j2 dest=/etc/redis/redis.local.conf group=redis owner=redis

    - name: copy redis-local script
      template: src=templates/redis-local.j2 dest=/usr/local/bin/redis-local mode=0755

    - name: installing redis binaries
      command: cp /tmp/redis-stable/src/{{ item }} /usr/local/bin
      with_items: 
        - redis-server
        - redis-cli
        - redis-check-aof

    - name: cleaning up build files
      command: rm -rf /tmp/{{ item }}
      with_items:
        - redis-stable
        - redis-stable.tar.gz

    - name: ensure redis service is restarted
      service: name=redis state=restarted