--- 
- hosts: web_servers
  become: true
  vars_files:                                
    - ./vars/variables.yml

  tasks:
# Install all programs and utils
    - name: Update_apt_cache  
      ansible.builtin.apt:    
        update_cache:                         yes

    - name: install all 
      apt:
        name:                                 [
                                              'fail2ban',
                                              'iptables',
                                              'policycoreutils',
                                              'selinux-utils',
                                              'selinux-basics'
                                              ]
        state:                                present

# Setup users
    - name: password for default user
      user:
        name:                                 "{{ item.name }}"  
        groups:                               "{{ item.groups }}"      
        shell:                                "{{ item.shell }}"
        password:                             '{{ item.password }}'
      loop:                                   "{{ vars_for_config_user }}"

    - name: create ssh directory for users
      ansible.builtin.file:
        path:                                 /home/{{ item.name }}/.ssh
        owner:                                "{{ item.name }}"
        group:                                "{{ item.name }}"
        mode:                                 '700'
        state:                                directory
      loop:                                   "{{ vars_for_config_user }}"

    - name: add ssh key to server
      copy:
        src:                                  /{{ users_path }}/{{ local_user }}/.ssh/id_ed25519.pub 
        dest:                                 /home/{{ item.name }}/.ssh/authorized_keys
        owner:                                "{{ item.name }}"
        group:                                "{{ item.name }}"
        mode:                                 '700'
      loop:                                   "{{ vars_for_config_user }}"

# Check actuali ssh port
    - name: check ssh port
      slurp:
        src:                                  /etc/ssh/sshd_config
      register:                               file_content

    - name: decode file content
      set_fact:
        decoded_file_content:                 "{{ file_content['content'] | b64decode }}"

    - name: find port
      set_fact:
        find_port:                            "{{ decoded_file_content | regex_search('^Port\\s+(\\d+)', '\\1', multiline=True) }}"
      when:                                   decoded_file_content is search('Port')

    - name: show port for debug
      debug:
        msg:                                  "{{ find_port }}"

# Check ssh port before change
    - name:                                   Start nc server on port
      command:                                nc -lv {{ ssh_port }} 
      register:                               check_port_change
      async:                                  90
      poll:                                   0

    - name: check nc job
      async_status:
        jid:                                  "{{ check_port_change.ansible_job_id }}"
      register:                               nc_job_status
      ignore_errors:                          true

    - name: message if port is already used 
      debug:
        msg:                                  "This port is already used!"
      when:                                   nc_job_status is search('in use')

    - name: nmap try this port 
      delegate_to:                            localhost
      command:                                nmap {{ ansible_host }} -p {{ ssh_port }}
      register:                               nmap_result
      when:                                   nc_job_status.started == 1

    - name: kill nc proccess
      command:                                pkill -f "nc -lv {{ ssh_port }}"
      when:                                   nc_job_status.finished == 0
      register:                               kill_result

# Configure ssh
    - name: configure sshd file
      template:
        src:                                  sshd_config.j2
        dest:                                 /etc/ssh/sshd_config
      notify:
        - restart ssh
        - add port to inventory file
        - restart systemd ssh
      when:                                   
        - nmap_result is search('open') 
        - kill_result.rc == 0

# Install and configure fail2ban
    - name: Restart sshd service to apply changes  
      ansible.builtin.systemd:    
        name:                                 ssh    
        state:                                restarted
      when:                                   
        - nmap_result is search('open') 
        - kill_result.rc == 0

    - name: config fail2ban
      include_role:
        name:                                 Oefenweb.fail2ban 
      vars:
        fail2ban_services:
          - name:                             sshd
            port:                             "{{ ssh_port }}"
            logpath:                          "{{ path_for_logs }}"
            maxretry:                         "{{ max_trys }}"
            bantime:                          "{{ ban_time }}"

    - name: Start and autostart fail2ban  
      ansible.builtin.service:    
        name:                                 fail2ban    
        state:                                restarted    
        enabled:                              true
        
 # Install and config iptables
    
    # - name: delete older config
    #   ansible.builtin.iptables:
    #     chain:                                INPUT
    #     flush:                                yes

   # To Learn
    - name: input only my ip
      ansible.builtin.iptables:
        chain:                                INPUT
        protocol:                             tcp
        source:                               "{{ item.address }}"
        destination_port:                     "{{ ssh_port }}"
        jump:                                 ACCEPT
      loop: "{{ ip_connect }}"
         
    - name: block other ip
      ansible.builtin.iptables:
        chain:                                INPUT
        protocol:                             tcp
        destination_port:                     "{{ ssh_port }}"
        jump:                                 DROP
      
    - name: block icmp
      ansible.builtin.iptables:
        chain:                                INPUT
        protocol:                             icmp
        jump:                                 DROP

    - name: delete old rule for ssh
      ansible.builtin.iptables:
        chain:                                INPUT
        protocol:                             tcp
        source:                               "{{ item.address }}"
        destination_port:                     "{{ find_port | first }}"
        jump:                                 ACCEPT
        state:                                absent
      loop:                                   "{{ ip_connect }}"
      when:                                   (find_port | first) != ssh_port


# Install and config selinux
    - name: configure selinux
      ansible.posix.selinux:
        policy:                               default
        state:                                permissive

# Reboot OS to run config
#    - name: reboot OS to run config
#      ansible.builtin.reboot:
#        msg: "Rebooting machine in 5 seconds"

  handlers:
    - name: restart ssh
      service:
        name:                                 ssh
        state:                                restarted

    - name: restart systemd ssh
      service:
        name:                                 daemon-reload
        state:                                restarted

    - name: add port to inventory file
      delegate_to:                            localhost
      lineinfile:
        path:                                 "/{{ path_to_inventory }}/inventory/hosts.yml" 
        regexp:                               '^(\s*)ansible_ssh_port:\s*\d+'
        line:                                 '\1ansible_ssh_port: {{ ssh_port }}'
        backrefs:                             yes
        state:                                present